<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project GraphBuilder – Documentation</title>
    <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/</link>
    <description>Recent content in Documentation on Project GraphBuilder</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Airline</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/airline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/airline/</guid>
      <description>
        
        
        &lt;h4 id=&#34;details&#34;&gt;Details&lt;/h4&gt;
&lt;p&gt;coming soon here!&lt;/p&gt;
&lt;h4 id=&#34;implementation-source&#34;&gt;Implementation Source&lt;/h4&gt;
&lt;p&gt;stored on GitHub &lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sample-applications/Airline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This example is created in TIBCO Flogo® Enterprise 2.8.0 studio.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: GraphBuilder</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder/</guid>
      <description>
        
        
        &lt;p&gt;Implementation Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/builder/connector/graph&#34;&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/builder/activity/builder&#34;&gt;BuildGraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/builder/activity/graphtofile&#34;&gt;GraphToFile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Lab1 - CSV</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/labs/lab-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/labs/lab-1/</guid>
      <description>
        
        
        &lt;p&gt;Let&#39;s build a graph model for Northwind data. In connection tab select Graph to host graph model for your flogo application.
&lt;img src=&#34;createModel01.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the diaog box&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set model name&lt;/li&gt;
&lt;li&gt;Select &amp;ldquo;Local File&amp;rdquo;&lt;/li&gt;
&lt;li&gt;select and upload northwind_model.json from your download folder&lt;/li&gt;
&lt;li&gt;Click connect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Northwind model descriptor file has attached to your graph model 
&lt;img src=&#34;createModel02.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now let&#39;s select Application table then create to start building an allication
&lt;img src=&#34;createApp01.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Name the application &amp;ldquo;Northwind&amp;rdquo; then create it
&lt;img src=&#34;createApp02.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select create to make it from scratch
&lt;img src=&#34;createApp03.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Flogo studio brings you to the dialog for creating the first flow. According to Northwind data set we have, we are going to create five flows to process data from customers.csv, suppliers.csv, employees.csv, categories.csv and products.csv respectively. We start from Building the customer data flow. 
&lt;img src=&#34;createApp04.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the empty flow panel click &amp;ldquo;Flow Inputs &amp;amp; Outputs&amp;rdquo; verticle bar to generate data schema for current flow.
&lt;img src=&#34;createApp05.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;The flow processes a CSV data row from file each time. Just set a sample of incoming data. In the sample &amp;ldquo;FileContent&amp;rdquo; is a row of CSV data and &amp;ldquo;LineNumber&amp;rdquo; is current &amp;ldquo;row number&amp;rdquo; of the row.
&lt;img src=&#34;createApp06.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;After clik &amp;ldquo;Save&amp;rdquo; buttom schema generator converts data sample to schema definition.
&lt;img src=&#34;createApp07.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s add a trigger (data source) for the flow by clicking &amp;ldquo;+&amp;rdquo; buttom on the left and select GraphBuilder_Tools -&amp;gt; FileReader trigger.
&lt;img src=&#34;createApp08.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Filling the &amp;ldquo;Trigger Settings&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filename : point to customers.csv in your download folder&lt;/li&gt;
&lt;li&gt;Asychroous : make it true so all triggers for different data would run simutanously&lt;/li&gt;
&lt;li&gt;Emit per Line : set true to make sure each time only one row of data sending to flow&lt;/li&gt;
&lt;li&gt;Max Number of Line : set to negative means no limit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save after you finish it
&lt;img src=&#34;createApp09.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now switch to &amp;ldquo;Map to Flow Inputs&amp;rdquo; and make following mapping&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FileContent (defined in schema) -&amp;gt; $trigger.FileContent&lt;/li&gt;
&lt;li&gt;LineNumber (defined in schema) -&amp;gt; $trigger.LineNumber&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then click save button
&lt;img src=&#34;createApp10.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Back to flow and adding first activities. Select GraphBuilder_Tools -&amp;gt; CSVParser for converting CSV text to system object.
&lt;img src=&#34;createApp11.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Filling Settings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Date Format Sample : 2006-01-02 (GOLang data format)&lt;/li&gt;
&lt;li&gt;Serve Graph Data : set false since we are not using it&lt;/li&gt;
&lt;li&gt;Output Field Names : One line of setting for each data column. AttributeName is the field name in system object and CSVFieldName is the column name in CSV file. Set optional to &amp;ldquo;false&amp;rdquo; for all key element fields. Click save after set configuring each line.&lt;/li&gt;
&lt;li&gt;First Row is Heade : Set true since the data file we use has header&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save button
&lt;img src=&#34;createApp12.png&#34; alt=&#34;Import Extension&#34;&gt;
&lt;img src=&#34;createApp14.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Switch to Inputs and map current input data to upstream output data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSVString -&amp;gt; $flow.FileContent&lt;/li&gt;
&lt;li&gt;SequenceNumber -&amp;gt; $flow.LineNumber&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save when finish it
&lt;img src=&#34;createApp13.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now the data has bean transform to the object which could be recognized by the system. The next step is to convert data to graph entities (nodes, edges and attributes). We use the core activity &amp;ldquo;Build Graph&amp;rdquo; to perform this tranformation.
Let&#39;s select GraphBuilder -&amp;gt; Bruild Graph and configue it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp15.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Filling setting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graph Model : Select &amp;ldquo;Northwind&amp;rdquo; which we just created. The Northwind graph model now associated with this activity. You would see this when we setup Inputs.&lt;/li&gt;
&lt;li&gt;Allow Null Key : Will Generate node, edge even their primary key will null element.&lt;/li&gt;
&lt;li&gt;Batch Mode : Set false since we process one data each time.&lt;/li&gt;
&lt;li&gt;Pass Through Fields : (leave it empty)&lt;/li&gt;
&lt;li&gt;Modify Size of Instances : (leave it empty, will use it in Employee data setup)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save button
&lt;img src=&#34;createApp16.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Before we can map the input data let&#39;s take look of the output of CSVParser (upstream data of current Build Graph activity). Since CSVParser has ability to handle multiple CSV rows, the output of it is an array not just a single object.
&lt;img src=&#34;createApp16-9.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;For procees the incoming array type of data, we need to turn on the iterator to iterate through upstream output data. Even there is only one element in the array for the current case. Following screenshot showing how to do it.
&lt;img src=&#34;createApp17.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;For mapping the input data you may notice that 1. the Northwind graph model has been brought to this activity as input schema, 2. The mapping target is not to CSVParser but the local interation. For the data coming from customers.csv you can populate more than one type of nodes which are deinfed in Northwind graph. Here is the nodes data which will be set.&lt;/p&gt;
&lt;p&gt;Customer node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_skipCondition -&amp;gt; null==$iteration[value].CustomerID&lt;/li&gt;
&lt;li&gt;CustomerID -&amp;gt; $iteration[value].CustomerID&lt;/li&gt;
&lt;li&gt;CustomerName -&amp;gt; $iteration[value].CustomerName&lt;/li&gt;
&lt;li&gt;ContactName -&amp;gt; $iteration[value].ContactName&lt;/li&gt;
&lt;li&gt;ContactTitle -&amp;gt; $iteration[value].ContactTitle&lt;/li&gt;
&lt;li&gt;City -&amp;gt; $iteration[value].City&lt;/li&gt;
&lt;li&gt;RegionName -&amp;gt; $iteration[value].RegionName&lt;/li&gt;
&lt;li&gt;RegionCode -&amp;gt; $iteration[value].RegionCode&lt;/li&gt;
&lt;li&gt;Country -&amp;gt; $iteration[value].Country&lt;/li&gt;
&lt;li&gt;Phone -&amp;gt; $iteration[value].Phone&lt;/li&gt;
&lt;li&gt;Fax -&amp;gt; $iteration[value].Fax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Company node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_skipCondition -&amp;gt; null==$iteration[value].CompanyID&lt;/li&gt;
&lt;li&gt;CompanyID -&amp;gt; $iteration[value].CompanyID&lt;/li&gt;
&lt;li&gt;CompanyName -&amp;gt; $iteration[value].CompanyName&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Region node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RegionName -&amp;gt; $iteration[value].RegionName&lt;/li&gt;
&lt;li&gt;Country -&amp;gt; $iteration[value].Country&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You don&#39;t have to setup mapping for edge if you don&#39;t have attribute need to be setup for them (we don&#39;t configue &amp;ldquo;label&amp;rdquo; since TGDB doesn&#39;t need it). BuildGraph activity is going to use the edge definded in graph model to create edge between nodes automatically.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp18.png&#34; alt=&#34;Import Extension&#34;&gt;
&lt;img src=&#34;createApp17-5.png&#34; alt=&#34;Import Extension&#34;&gt;
&lt;img src=&#34;createApp19.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;After we convert data to graph entities we can insert them to TGDB. Let&#39;s create TGDB connection first. In Connections tab select Add Connection -&amp;gt; TGDB Connector
&lt;img src=&#34;createModel03.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the diaog box filling following information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection name (for example &amp;ldquo;TGDB&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;TGDB Server URL&lt;/li&gt;
&lt;li&gt;Username&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;Keep Connection Alive : select &amp;ldquo;true&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click connect&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createModel04.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now back to application &amp;ldquo;Customer Data&amp;rdquo; flow to add TGDB activity. Slect GraphBuilder_TGDB -&amp;gt; TGDBUpsert.
&lt;img src=&#34;createApp20.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Filling Setting for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TGDB connection : Select the &amp;ldquo;TGDB&amp;rdquo; Connection we just created&lt;/li&gt;
&lt;li&gt;Set Allow empty sting key to true (so node with empty string key still get inserted)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp21.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map input data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graph{} - $activity[BuildGraph].Graph{}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the Graph object is immutable, you are not allow to access the internal structure detail.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp22.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can insert built in log activity by following steps:
Make room for logger activity by shifting activities one position to the right.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp23.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add log activity by select Default -&amp;gt; Log&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp24.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Setup message for priniting (you can apply built-in fuctions to incoming data fields)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;message : string.concat(string.tostring($flow.LineNumber), &amp;quot; - &amp;ldquo;, $flow.FileContent)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;createApp25.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can add write the entities which generate be BuildGraph activity by adding GraphBuilder -&amp;gt; GraphtoFile activity&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp26.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Specify the output folder and filename for writing the graph entities&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp27.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Input data is and only can be Graph. The input setup same as TGDBUpsert&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp28.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Congradulations you have finish the first data flow for the application&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp29.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you can follow the same steps to finish all the rest of flows&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp30.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;When you work on employee flow, please pay attention on following steps.&lt;/p&gt;
&lt;p&gt;In employee data there are two fields EmployeeID and ReportTo which represent one indivisual employee. It implies that by the infomation in the employee data we can populate two employee nodes. One for empoyee himself/herself and one for his/her manager. We have to incresae the employee instance for the data mapping.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify size of instances : Select &amp;ldquo;Employee&amp;rdquo; node and make the number of instances to 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp31.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Switch to Inputs you will see two employee nodes appears (Employee0 and Employee1). Let&#39;s make employee0 the employee (not manager) so all data can be populate to this node.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp32.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;We make the emplyee1 node represent the manager of employee0 node so the only information we have for it (in the data) is &amp;ldquo;ReportTo&amp;rdquo; which will populate employee1&#39;s EmployeeID.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp33.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then we need to tell BuildGrap activity the relation between employee0 and employee1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;createApp34.png&#34; alt=&#34;Import Extension&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we cab test out Northwind application by sending data to it then we&#39;ll verify if data get inserted to TGDB server&lt;/p&gt;
&lt;p&gt;For building Northwind flogo application&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In project click &amp;ldquo;Build&amp;rdquo; button&lt;/li&gt;
&lt;li&gt;Select the build target OS (in my case Darwin/amd64) then click to build&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;BuildNorthwind_01.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once finished you can get your executable (Northwind-darwin_amd64) in your browser download folder&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;BuildNorthwind_02.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then we need to setup a TIBCO® Graph Database. Currently Project GraphBuilder &amp;ldquo;only&amp;rdquo; support TGDB 2.0.1 (both Enterprise Edition and Community Edition are supported). 
You can get a Community version &lt;a href=&#34;http://community.tibco.com/products/tibco-graph-database&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;TGDB_01.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Follow instructions in the download file to install TGDB server then copy artifacts from your labs folder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;labs/tgdb/northwind -&amp;gt; tgdb/2.0/examples&lt;/li&gt;
&lt;li&gt;labs/tgdb/init_northwind_with_data_definition.sh -&amp;gt; tgdb/2.0/bin/&lt;/li&gt;
&lt;li&gt;labs/tgdb/run_northwind.sh -&amp;gt; tgdb/2.0/bin/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;TGDB_02.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;In terminal switch to tgdb/2.0/bin folder then&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;execute ./init_northwind_with_data_definition.sh to initialize tgdb with Northwind schema&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;TGDB_03.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;TGDB_04.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;execute ./run_northwind.sh to run tgdb server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;TGDB_05.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;TGDB_06.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Open a new terminal and switch to the folder which contains Northwind appliction executable (Northwind-darwin_amd64).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change Northwind-darwin_amd64&#39;s permission to executable&lt;/li&gt;
&lt;li&gt;Run Northwind-darwin_amd64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;LaunchNorthwind.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Open a new terminal and switch to TGDB bin folder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run tgdb-admin&lt;/li&gt;
&lt;li&gt;make query to get all categories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Query.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&#39;ve proved that data has been inserted to TGDB server&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Overview</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/overview/</guid>
      <description>
        
        
        &lt;p&gt;By using GraphBuilder you are able to build your own application to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transform your data to desirded graph structure based upon your graph model.&lt;/li&gt;
&lt;li&gt;Insert graph into many major graph databases in the marcket (include TIBCO Graph Database, Dgraph, Neo4j and Janusgraph).&lt;/li&gt;
&lt;li&gt;Query and delete graph data against TIBCO Graph Database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;graph_builder.jpg&#34; alt=&#34;Flogo Studio&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Getting Started</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/getting-started/</guid>
      <description>
        
        
        &lt;ol&gt;
&lt;li&gt;Download latest TIBCO Flogo Enterprise from here &lt;a href=&#34;https://edelivery.tibco.com/storefront/en/eval/tibco-flogo-enterprise/prod11810.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download GraphBuilder user extensions &lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/dist&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;import GraphBuilder user extensions to TIBCO Flogo Enterprise studio.&lt;/li&gt;
&lt;li&gt;Enjoy it!&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Hierachy</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/hierachy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/hierachy/</guid>
      <description>
        
        
        &lt;h4 id=&#34;details&#34;&gt;Details&lt;/h4&gt;
&lt;p&gt;coming soon here!&lt;/p&gt;
&lt;h4 id=&#34;implementation-source&#34;&gt;Implementation Source&lt;/h4&gt;
&lt;p&gt;stored on GitHub &lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sample-applications/hierarchy&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This example is created in TIBCO Flogo® Enterprise 2.8.0 studio.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Lab2 - Query</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/labs/lab-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/labs/lab-2/</guid>
      <description>
        
        
        &lt;p&gt;Create a new flogo application called &amp;ldquo;TGDB_RESTful_Service&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful01.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click create to build from scratch&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful02.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Create first flow to query metadata&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful03.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Define the data schema for flow input by pasting sample data (queryType in string data type).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;queryType : metadata, edgetypes or nodetypes (for metadata flow)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;RESTful04.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Save sample data so schema builder can generate schema definition from it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful05.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Define flow output schema by sample output data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content : contains the data of query result&lt;/li&gt;
&lt;li&gt;Success : true means query go through without error&lt;/li&gt;
&lt;li&gt;Code : error code&lt;/li&gt;
&lt;li&gt;Message : error message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful06.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Save trigger schema definition generation&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful07.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Adding trigger to receive HTTP request by clicking &amp;ldquo;+&amp;rdquo; -&amp;gt; &amp;ldquo;ReceiveHTTPMessage&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful07-5.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select GET, setup resource path &amp;ldquo;/tgdb/{queryType}&amp;rdquo; then click continue&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful09.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Just add the trigger&amp;rdquo; button&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful09-5.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;We have a trigger with HTTP GET methods and listen on port 9999)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful08.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click trigger to map incoming query data to flow input data&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful10.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;In &amp;ldquo;reply Settings&amp;rdquo; set reply schema make it same as flow output data schema&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful11.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;In &amp;ldquo;Map from flow outputs&amp;rdquo; mapping data.queryResult to  $flow.queryResult&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful12.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add query activity by select GraphBuilder_TGDB -&amp;gt; TGDBQuery activity&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful13.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select &amp;ldquo;TGDB&amp;rdquo; coinnection we created in lab1 so the TGDBQuery activity is going to query against the server which we&#39;ve upserted Northwind data to&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful14.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map input data for TGDBQuery activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QueryType : $flow.queryType&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;RESTful15.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Adding return activity to link the query result back to HTTP trigger&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful16.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map outputs for Return activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;queryResult : $activity[TGDBQuery].queryResult (map entire object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;RESTful17.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;You&#39;ve finished creating metadata query flow&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful18.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;Create&amp;rdquo; button to create another flow for querying data content&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful19.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Create name and description for the new flow&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful20.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Define the flow inputs data schema by sample data (schema detail see TGDB documentation)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;queryType : search (for content flow)&lt;/li&gt;
&lt;li&gt;language : TGQL (TIBCO graph query language) or Gremlin&lt;/li&gt;
&lt;li&gt;queryString : for TGQL and Gremlin&lt;/li&gt;
&lt;li&gt;traversalCondition : TGQL only&lt;/li&gt;
&lt;li&gt;traversalDepth : TGQL only&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;RESTful21.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click save to generate data schema definition&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful22.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Flow output data schema same as metadata flow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful22-5.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add another trigger for receiving content query&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful23.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;POST method for content query&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful24.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Adding sample query for the output (to the flow) setting. To be noticed that the schema is very similar to flow input schema but grouped under &amp;ldquo;query&amp;rdquo; keyword.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful25.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map to flow input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;queryType : $trigger.pathParams.queryType&lt;/li&gt;
&lt;li&gt;language : $trigger.body.query.language&lt;/li&gt;
&lt;li&gt;queryString : $trigger.body.query.queryString&lt;/li&gt;
&lt;li&gt;traversalCondition : $trigger.body.query.traversalCondition&lt;/li&gt;
&lt;li&gt;endCondition : $trigger.body.query.endCondition&lt;/li&gt;
&lt;li&gt;traversalDepth : $trigger.body.query.traversalDepth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful26.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Setting the reply data (same as metadata flow)
&lt;img src=&#34;RESTful26-5.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful26-6.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add query activity by select GraphBuilder_TGDB -&amp;gt; TGDBQuery activity&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful13.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select &amp;ldquo;TGDB&amp;rdquo; coinnection we created in lab1 so the TGDBQuery activity is going to query against the server which we&#39;ve upserted Northwind data to&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful14.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map input data for TGDBQuery activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QueryType : $flow.queryType&lt;/li&gt;
&lt;li&gt;params.language : $flow.language&lt;/li&gt;
&lt;li&gt;params.queryString : $flow.queryString&lt;/li&gt;
&lt;li&gt;params.traversalCondition : $flow.traversalCondition&lt;/li&gt;
&lt;li&gt;params.endCondition : $flow.endCondition&lt;/li&gt;
&lt;li&gt;params.traversalDepth : $flow.traversalDepth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;RESTful27.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Adding return activity to link the query result back to HTTP trigger&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful16.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map outputs for Return activity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;queryResult : $activity[TGDBQuery].queryResult (map entire object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;RESTful17.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;The TGDB_RESTful_Service is ready for query Nothwind graph&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;RESTful28.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now it&#39;s time to test out TGDB_RESTful_Service and to &amp;ldquo;see&amp;rdquo; Nothwind data by query against TGDB server&lt;/p&gt;
&lt;p&gt;For building flogo application&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In project click &amp;ldquo;Build&amp;rdquo; button&lt;/li&gt;
&lt;li&gt;Select the build target OS (in my case Darwin/amd64) then click to build&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;BuildRESTful01.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once finished you can get your executable in your browser download folder&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;BuildRESTful02.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Find your executable and change its permission to executable then run it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Launch_RESTfulService.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;Switch to your local labs -&amp;gt; utilities -&amp;gt; lite folder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launch UI tool by type &amp;ldquo;npm start&amp;rdquo;&lt;/li&gt;
&lt;li&gt;You need to have npm and lite-server installed before you use this tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Launch_Lite_Server.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;As soon as you launch the server, your default browser will pop up and show Project GraphBuilder UI utility
For querying data against TGDB server clicks &amp;ldquo;TGDB Data&amp;rdquo; tab&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Launch_UI_01.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can make query to TGDB using TGQL expression as screenshot bellow&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Launch_UI_02.png&#34; alt=&#34;Build RESTful&#34;&gt;&lt;/p&gt;
&lt;p&gt;You now can see the Nothwind data in TGDB server life&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TGDB</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-tgdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-tgdb/</guid>
      <description>
        
        
        &lt;p&gt;Implementation Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/tgdb/connector/&#34;&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/tgdb/activity/tgdbupsert/&#34;&gt;TGDBUpsert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/tgdb/activity/tgdbquery/&#34;&gt;TGDBQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/tgdb/activity/tgdbdelete/&#34;&gt;TGDBDelete&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dgraph</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-dgraph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-dgraph/</guid>
      <description>
        
        
        &lt;p&gt;Implementation Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/dgraph/connector/dgraph/&#34;&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/dgraph/activity/dgraphupsert/&#34;&gt;DgraphUpsert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/dgraph/activity/dgraphquery/&#34;&gt;DgraphQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: IoT Data Consumer</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/iot-data-consumer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/iot-data-consumer/</guid>
      <description>
        
        
        &lt;h4 id=&#34;details&#34;&gt;Details&lt;/h4&gt;
&lt;p&gt;coming soon here!&lt;/p&gt;
&lt;h4 id=&#34;implementation-source&#34;&gt;Implementation Source&lt;/h4&gt;
&lt;p&gt;stored on GitHub &lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sample-applications/IotDataConsumer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This example is created in TIBCO Flogo® Enterprise 2.8.0 studio.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Lab3 - real-time</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/labs/lab-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/labs/lab-3/</guid>
      <description>
        
        
        &lt;p&gt;Now let&#39;s create an application which and receive real-time order events from Kafka topic then build graph entities, upsert to TGDB then serve as real-time streaming server.&lt;/p&gt;
&lt;p&gt;First of all create a &amp;ldquo;Server Sent Event&amp;rdquo; internal connection to bridge the data between order event flow and server (for serving streaming graph entity to client).&lt;/p&gt;
&lt;p&gt;In &amp;ldquo;Connections&amp;rdquo; tab select GraphBuilder_SSE -&amp;gt; Server-sent Events Connection&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime02.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Connection settings (following settings match the client tool provided for browsing real-time graph entity update)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection Name : Set name to &amp;ldquo;EventServer&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Outbound : Set false as it&#39;s a server&lt;/li&gt;
&lt;li&gt;Server port : 8888&lt;/li&gt;
&lt;li&gt;Path : It&#39;s URI path &amp;ldquo;/sse/&amp;rdquo;&lt;/li&gt;
&lt;li&gt;TLS enabled : false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click connect&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime01.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Back to Northwind application to create a new flow called &amp;ldquo;Order Event Server&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime07.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Create a trigger to serve graph entities (generated by order event) for streaming client&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime03.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Settings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection Name : Select the &amp;ldquo;EventServer&amp;rdquo; connection which we just created&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click save&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime04.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;This simple flow will be serving streaming graph entities&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime04-5.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;The last flow in Northwind application is &amp;ldquo;Order Data Flow&amp;rdquo; which listen to Kafla topic to get order event as input data.&lt;/p&gt;
&lt;p&gt;Before we create the flow, we need to create a &amp;ldquo;Kafka Connection&amp;rdquo;. In connection tab select &amp;ldquo;Appach Kafka Client Configuration&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime06.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Configure Appach Kafka Client as following screenshot then save it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime05.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Back to application to create new flow called &amp;ldquo;Order Event&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime08.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click Flow Inputs &amp;amp; Outputs (vertical blue bar) to define schema between flow and trigger. Set following data sample then click save&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime12.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;After click save button schema generator would convert sample data to schema definition&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime13.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;ldquo;+&amp;rdquo; to add trigger (Kafka Vonsumer)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime09.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select &amp;ldquo;Northwind Orders&amp;rdquo; configuration we just created then click continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime10.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select &amp;ldquo;Just Add Trigger&amp;rdquo; button to add trigger&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime11.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Filling trigger setting as it shown below in screenshot&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime14.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map OrderString to $trigger.stringValue&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime15.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add CSVParser to convert incoming CVS string to system object&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime16.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Follow the instruction in lab1 define the mapping between CSV fields and attribute of system object. Use the column field name as attribute name.&lt;/p&gt;
&lt;p&gt;Make sure &amp;ldquo;First Row Is Header&amp;rdquo; set to false&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime17.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Configure the input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSVString : $flow.OrderString&lt;/li&gt;
&lt;li&gt;Leave SequenceNumber not mapped&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;realtime18.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the data has bean transform to the object which could be recognized by the system. The next step is to convert data to graph entities (nodes, edges and attributes). We use the core activity &amp;ldquo;Build Graph&amp;rdquo; to perform this tranformation.
Let&#39;s select GraphBuilder -&amp;gt; Bruild Graph and configue it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime18-5.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Follow lab1&#39;s instruction to turn on the iterator to iterate through upstream output data then map the input data. Here is the mapping&lt;/p&gt;
&lt;p&gt;Product node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ProductID -&amp;gt; $iteration[value].ProductID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Employee node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EmployeeID -&amp;gt; $iteration[value].EmployeeID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Customer node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CustomerID -&amp;gt; $iteration[value].CustomerID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Order node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OrderID -&amp;gt; $iteration[value].OrderID&lt;/li&gt;
&lt;li&gt;CustomerID -&amp;gt; $iteration[value].CustomerID&lt;/li&gt;
&lt;li&gt;EmployeeID- &amp;gt; $iteration[value].EmployeeID&lt;/li&gt;
&lt;li&gt;OrderDate -&amp;gt; $iteration[value].OrderDate&lt;/li&gt;
&lt;li&gt;RequiredDate -&amp;gt; $iteration[value].RequiredDate&lt;/li&gt;
&lt;li&gt;ShippedDate -&amp;gt; $iteration[value].ShippedDate&lt;/li&gt;
&lt;li&gt;ShipVia -&amp;gt; $iteration[value].ShipVia&lt;/li&gt;
&lt;li&gt;Freight -&amp;gt; $iteration[value].Freight&lt;/li&gt;
&lt;li&gt;ShipName -&amp;gt; $iteration[value].ShipName&lt;/li&gt;
&lt;li&gt;ShipAddress -&amp;gt; $iteration[value].ShipAddress&lt;/li&gt;
&lt;li&gt;ShipCity -&amp;gt; $iteration[value].ShipCity&lt;/li&gt;
&lt;li&gt;ShipRegion -&amp;gt; $iteration[value].ShipRegion&lt;/li&gt;
&lt;li&gt;ShipPostalCode - &amp;gt; $iteration[value].ShipPostalCode&lt;/li&gt;
&lt;li&gt;ShipCountry -&amp;gt; $iteration[value].ShipCountry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suborder node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OrderID -&amp;gt; $iteration[value].OrderID&lt;/li&gt;
&lt;li&gt;ProductID -&amp;gt; $iteration[value].ProductID&lt;/li&gt;
&lt;li&gt;UnitPrice -&amp;gt; $iteration[value].UnitPrice&lt;/li&gt;
&lt;li&gt;Quantity -&amp;gt; $iteration[value].Quantity&lt;/li&gt;
&lt;li&gt;Discount -&amp;gt; $iteration[value].Discount&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Region node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RegionName -&amp;gt; $iteration[value].RegionName&lt;/li&gt;
&lt;li&gt;Country -&amp;gt; $iteration[value].Country&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since one order can be splited to multiple order events (with different product sold). We create two types of order nodes 1. Odrer node with OrderID as its primary key and 2. Suborder node with OrderID, ProductID as primary key. All Suborder nodes connect to Order node by OrderID. (See following screenshot)&lt;/p&gt;
&lt;p&gt;Order :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime19.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Suborder :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime20.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Follow lab1&#39;s instruction to add TGDBUpsert activity&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime20-2.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select Connetion&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime20-3.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map input data&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime20-4.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now adding a new type of activity called SSEEndPoint which sends graph entities to SSEServer for serving streaming client.&lt;/p&gt;
&lt;p&gt;Select SSEEndPoint activity from GraphBuilder_SSE.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime21.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select &amp;ldquo;SSEConnection&amp;rdquo; we created and used in SSEServer then SSEEndPoint is connected to SSEServer now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime22.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Setup SessionId to &amp;ldquo;order&amp;rdquo; so the complete URI to access to this event flow would be /sse/order&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime23.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Map input data to Graph object from BuildGraph activity&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime24.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can add log and GraphtoFile activities like previous configured flow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime25.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we have finish last flow for Northwind application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime26.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is the final version of flogo Northwind application&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;realtime27.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s rebuild application for further testing&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;BuildNorthwind_02.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;We are going to install Kafka message bus for providing order event. &lt;a href=&#34;https://kafka.apache.org/quickstart&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; is the instalation instructions.&lt;/p&gt;
&lt;p&gt;After downloading and installing Kafka we can start Kafka&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start zoo keeper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;StartKafka01.png&#34; alt=&#34;Realtime&#34;&gt;
&lt;img src=&#34;StartKafka02.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;StartKafka03.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &amp;ldquo;test&amp;rdquo; topic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;StartKafka04.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s restart Northwind appliction executable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to the folder which contains Northwind appliction executable (Northwind-darwin_amd64).&lt;/li&gt;
&lt;li&gt;Change Northwind-darwin_amd64&#39;s permission to executable&lt;/li&gt;
&lt;li&gt;Run Northwind-darwin_amd64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This time you&#39;ll see two extra information while Northwind application starting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kafka consumer (the trigger of order event flow) is up and listening&lt;/li&gt;
&lt;li&gt;SSEServer is up and waiting for client (UI utility) to connect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;StartKafka05.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here it the our test (see screenshot)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure TGDB, TGDB_RESTful_Service, Kafka (server, zoo keeper, producer) and UI utility are running&lt;/li&gt;
&lt;li&gt;On the upper/middle left of screenshot open oerders.csv file&lt;/li&gt;
&lt;li&gt;On the lower left of screenshot start Kafka producer and keep it opened&lt;/li&gt;
&lt;li&gt;On the right follow the instruction to 1. Click &amp;ldquo;Realtime Data&amp;rdquo; 2. Click &amp;ldquo;Connect&amp;rdquo; to connect to SSE server in Northwind application 3. Copy &amp;amp; paste order to Kafka producer then press enter 4 ~ 6. Each time you send one order you will see the corresponding graph entities showing on the UI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Send more order as your wish.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;FinalTest.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the streaming testing we also want to see the order in TGDB. Follow the instrctions in lab2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click &amp;ldquo;TGDB Data&amp;rdquo; button&lt;/li&gt;
&lt;li&gt;Use the default query setup but make traversalDepth = 5&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Make Query&amp;rdquo; button&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&#39;ll see the oder with OrderID = 10248 and its associated graph entities on the UI&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;QueryGraph.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;The last test is about traversal query. We are going to find the supplier companies which supplies prodcut which the customer company called &amp;lsquo;Vins et alcools Chevalier&amp;rsquo; purchased. We are going use Postman and TGDB_RESTful_Service to query against TGDB server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open a postman and setup a POST query&lt;/li&gt;
&lt;li&gt;The gremlin query is &amp;ldquo;g.V().has(&amp;lsquo;Company&amp;rsquo;, &amp;lsquo;CompanyID&amp;rsquo;, &amp;lsquo;Vins et alcools Chevalier&amp;rsquo;).in(&amp;lsquo;Customer_Company&amp;rsquo;).in(&amp;lsquo;SoldTo&amp;rsquo;).out(&amp;lsquo;Includes&amp;rsquo;).out(&amp;lsquo;Contains&amp;rsquo;).in(&amp;lsquo;Supplies&amp;rsquo;).out(&amp;lsquo;Supplier_Company&amp;rsquo;);&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should get &amp;ldquo;Formaggi Fortini s.r.l.&amp;quot;, &amp;ldquo;Leka Trading&amp;rdquo; and &amp;ldquo;Cooperativa de Quesos &amp;lsquo;Las Cabras&amp;rsquo;&amp;rdquo; in your result&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;QueryPostMan.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Observe the traversal request on the UI utility and verify the correctness ogf the query&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;QueryPostManOnGraph.png&#34; alt=&#34;Realtime&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you&#39;ve finish all three labs&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Meetup Event</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/meetup-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/meetup-event/</guid>
      <description>
        
        
        &lt;p&gt;This example uses Meetup open event through Meetup API see &lt;a href=&#34;https://www.meetup.com/meetup_api/&#34;&gt;https://www.meetup.com/meetup_api/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-graph-model&#34;&gt;Create Graph Model&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;create_connection.png&#34; alt=&#34;create_connection&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;setting&#34;&gt;Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Graph Name:&lt;/strong&gt; -&amp;gt; Meetup&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model Source:&lt;/strong&gt; -&amp;gt; Select Local File&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graph Model:&lt;/strong&gt; -&amp;gt; Select sample-applications/Meetup_Event/Model_Meetup.json&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-connection-for-subscribing-meetup-open-event&#34;&gt;Create Connection for subscribing Meetup open event&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;create_connection2.png&#34; alt=&#34;create_connection2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;setting-1&#34;&gt;Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Connection Name:&lt;/strong&gt; -&amp;gt; Meetup_Event&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outbound:&lt;/strong&gt; -&amp;gt; Sellect &amp;ldquo;true&amp;rdquo; for connecting to Meetup service&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server URL:&lt;/strong&gt; -&amp;gt; &lt;a href=&#34;http://stream.meetup.com/&#34;&gt;http://stream.meetup.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Name:&lt;/strong&gt; -&amp;gt; 2/open_events&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Token:&lt;/strong&gt; -&amp;gt; not required for accessing open event&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-connection-for-serving-streaming-graph-data&#34;&gt;Create Connection for serving streaming graph data&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;create_connection3.png&#34; alt=&#34;create_connection3&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;setting-2&#34;&gt;Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Connection Name:&lt;/strong&gt; -&amp;gt; EventServer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outbound:&lt;/strong&gt; -&amp;gt; select &amp;ldquo;false&amp;rdquo; since it&#39;s a server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server port:&lt;/strong&gt; -&amp;gt; any available port (8888 for this example)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path:&lt;/strong&gt; -&amp;gt; /sse/ (client connect http://[host]:[port]/sse/meetup to subscribe &amp;ldquo;meetup&amp;rdquo; graph stream)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-graphmodel-for-enriching-meetup-graph&#34;&gt;Create GraphModel for Enriching Meetup Graph&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;create_connection4.png&#34; alt=&#34;create_connection4&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;setting-3&#34;&gt;Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Graph Name:&lt;/strong&gt; -&amp;gt; GeographyInfo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model Source:&lt;/strong&gt; -&amp;gt; Select Local File&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graph Model:&lt;/strong&gt; -&amp;gt; Select sample-applications/Meetup_Event/Model_GeographyInfo.json&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-application&#34;&gt;Create Application&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;create_application.png&#34; alt=&#34;create_application&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-flow-for-consuming-meetup-open-event&#34;&gt;Create Flow for consuming Meetup open event&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;create_application2.png&#34; alt=&#34;create_application2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;configure-flow-inputs-and-outputs&#34;&gt;Configure flow inputs and outputs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;input sample&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;EventString&amp;quot; : &amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;add-activity-1&#34;&gt;Add Activity 1&lt;/h3&gt;
&lt;p&gt;Select GraphBuilder_Tools -&amp;gt; JSONDeserializer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JSON Data Sample:&lt;/strong&gt; -&amp;gt; Select sample-applications/Meetup_Event/.json&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Values:&lt;/strong&gt; -&amp;gt; Set &amp;ldquo;na&amp;rdquo; as default for venue.address_1, category.name&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-activity-2&#34;&gt;Add Activity 2&lt;/h3&gt;
&lt;p&gt;Select GraphBuilder_Builder -&amp;gt; BuildGraph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Graph Model:&lt;/strong&gt; -&amp;gt; Select &amp;ldquo;Meetup&amp;rdquo; (the connection we created previously)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configure Model:&lt;/strong&gt; -&amp;gt; Map attributes to input data fields (for nodes and edges)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-activity-3-1&#34;&gt;Add Activity 3-1&lt;/h3&gt;
&lt;p&gt;Select GraphBuilder_SSE -&amp;gt; SSEEndPoint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSE Connection:&lt;/strong&gt; -&amp;gt; Select &amp;ldquo;EventServer&amp;rdquo; for serving streaming data(the connection we created previously)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avtivity Input 1:&lt;/strong&gt; set StreamId to &amp;ldquo;meetup&amp;rdquo; (the resource name for client to subscribe)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avtivity Input 2:&lt;/strong&gt; map required Data object to $activity[BuildGraph].Graph (output of BuildGraph activity)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-activity-3-2&#34;&gt;Add Activity 3-2&lt;/h3&gt;
&lt;p&gt;Select GraphBuilder_TGDB -&amp;gt; TGDBUpsert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TGDB Connection:&lt;/strong&gt; -&amp;gt; Select &amp;ldquo;TGDB&amp;rdquo; for upserting streaming data to TGDB(the connection we created in TGDB_RESTful_Service sample application)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avtivity Input 1:&lt;/strong&gt; set required Graph object to $activity[BuildGraph].Graph&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add-a-trigger&#34;&gt;Add a trigger&lt;/h4&gt;
&lt;p&gt;Select GraphBuilder_SSE -&amp;gt; SSESubscriber&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSE Connection(outbound request):&lt;/strong&gt; -&amp;gt; Select &amp;ldquo;Meetup_Event&amp;rdquo; for consuming open event from Meetup web site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flow Input:&lt;/strong&gt; -&amp;gt; Map EventString to $trigger.Event (This is the output of SSESubscriber)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-flow-for-serving-streaming-graph-data&#34;&gt;Create Flow for Serving Streaming Graph Data&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;create_application3.png&#34; alt=&#34;create_application3&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;configure-flow-inputs-and-outputs-1&#34;&gt;Configure flow inputs and outputs&lt;/h4&gt;
&lt;p&gt;No configuration is required here since the data flow comes from SSEEndPoint of Meetup Event Flow directly&lt;/p&gt;
&lt;h4 id=&#34;add-a-trigger-1&#34;&gt;Add a trigger&lt;/h4&gt;
&lt;p&gt;GraphBuilder_SSE -&amp;gt; SSESubscriber&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSE Connection(inbound requests):&lt;/strong&gt; -&amp;gt; Select &amp;ldquo;EventServer&amp;rdquo; for serving streaming data(so now SSEEndPoint connected)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flow Input:&lt;/strong&gt; -&amp;gt; Map EventString to $trigger.Event (This is the output of SSESubscriber)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Incoming Query&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP GET with resource path /sse/{streamId}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reply&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$flow.queryResult&lt;/p&gt;
&lt;p&gt;sample :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
 &amp;quot;graph&amp;quot;:{
  &amp;quot;edges&amp;quot;:{},
  &amp;quot;id&amp;quot;:&amp;quot;GeographyInfo&amp;quot;,
  &amp;quot;model&amp;quot;:{
   &amp;quot;edges&amp;quot;:{
    &amp;quot;attrTypeMap&amp;quot;:{&amp;quot;in_Continent&amp;quot;:{}},
    &amp;quot;directionMap&amp;quot;:{&amp;quot;in_Continent&amp;quot;:1},
    &amp;quot;keyMap&amp;quot;:{&amp;quot;in_Continent&amp;quot;:null},
    &amp;quot;types&amp;quot;:[&amp;quot;in_Continent&amp;quot;],
    &amp;quot;vertexes&amp;quot;:{&amp;quot;in_Continent&amp;quot;:[&amp;quot;City&amp;quot;,&amp;quot;Continent&amp;quot;]}
   },
   &amp;quot;nodes&amp;quot;:{
    &amp;quot;attrTypeMap&amp;quot;:{&amp;quot;Continent&amp;quot;:{&amp;quot;Name&amp;quot;:&amp;quot;String&amp;quot;},&amp;quot;Country&amp;quot;:{&amp;quot;Country_Code&amp;quot;:&amp;quot;String&amp;quot;}},
    &amp;quot;keyMap&amp;quot;:{&amp;quot;Continent&amp;quot;:[&amp;quot;Name&amp;quot;],&amp;quot;Country&amp;quot;:[&amp;quot;Country_Code&amp;quot;]},&amp;quot;types&amp;quot;:[&amp;quot;Country&amp;quot;,&amp;quot;Continent&amp;quot;]
   }
  },
  &amp;quot;modelId&amp;quot;:&amp;quot;GeographyInfo&amp;quot;,
  &amp;quot;nodes&amp;quot;:{
   &amp;quot;Continent_0ecff3229a1a13980689def44b2c66e1&amp;quot;:{
    &amp;quot;attributes&amp;quot;:{&amp;quot;Name&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;Name&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;String&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;North_America&amp;quot;}},
    &amp;quot;key&amp;quot;:[&amp;quot;North_America&amp;quot;],
    &amp;quot;keyAttributeName&amp;quot;:[&amp;quot;Name&amp;quot;],
    &amp;quot;type&amp;quot;:&amp;quot;Continent&amp;quot;
   },
   &amp;quot;Country_5181a8acdef7be40dfbf3ec66bee2b20&amp;quot;:{
    &amp;quot;attributes&amp;quot;:{&amp;quot;Country_Code&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;Country_Code&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;String&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;us&amp;quot;}},
    &amp;quot;key&amp;quot;:[&amp;quot;us&amp;quot;],
    &amp;quot;keyAttributeName&amp;quot;:[&amp;quot;Country_Code&amp;quot;],
    &amp;quot;type&amp;quot;:&amp;quot;Country&amp;quot;
   }
  }
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-flow-for-enriching-meetup-graph&#34;&gt;Create Flow for Enriching Meetup Graph&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;create_application4.1.png&#34; alt=&#34;create_application4.1&#34;&gt;
&lt;img src=&#34;create_application4.2.png&#34; alt=&#34;create_application4.2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;configure-flow-inputs-and-outputs-2&#34;&gt;Configure flow inputs and outputs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;input sample&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;Continent&amp;quot;: {
    &amp;quot;Name&amp;quot;: &amp;quot;North_America&amp;quot;,
    &amp;quot;Countries&amp;quot;: [
      &amp;quot;us&amp;quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;add-activity-1-1&#34;&gt;Add Activity 1&lt;/h3&gt;
&lt;p&gt;Select GraphBuilder_Builder -&amp;gt; BuildGraph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Graph Model:&lt;/strong&gt; -&amp;gt; Select &amp;ldquo;GeographyInfo&amp;rdquo; (the connection we created previously)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configure Model:&lt;/strong&gt; -&amp;gt; Map attributes to input data fields (for nodes and edges)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;add-activity-2-1&#34;&gt;Add Activity 2&lt;/h3&gt;
&lt;p&gt;Select GraphBuilder_SSE -&amp;gt; SSEEndPoint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSE Connection:&lt;/strong&gt; -&amp;gt; Select &amp;ldquo;EventServer&amp;rdquo; for serving streaming data(the connection we created previously)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avtivity Input 1:&lt;/strong&gt; set StreamId to &amp;ldquo;GeographyInfo&amp;rdquo; (the resource name for client to subscribe)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avtivity Input 2:&lt;/strong&gt; map required Data object to $activity[BuildGraph].Graph (output of BuildGraph activity)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add-a-trigger-receive-http-message&#34;&gt;Add a trigger (Receive HTTP Message)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting1:&lt;/strong&gt; Set Port to any available one (in this sample 9998)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting2:&lt;/strong&gt; Set Method to &amp;ldquo;POST&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting3:&lt;/strong&gt; Set Path to &amp;ldquo;/geography/{Continent}&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Output Setting&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$trigger.pathParams.Continent
and 
$trigger.body&lt;/p&gt;
&lt;p&gt;body sample :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Countries&amp;quot;: [
        &amp;quot;us&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flow Input1:&lt;/strong&gt; Continent.Name map to $trigger.pathParams.Continent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flow Input2:&lt;/strong&gt; Continent.Countries map to $trigger.body.Countries&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;implementation-source&#34;&gt;Implementation Source&lt;/h4&gt;
&lt;p&gt;stored on GitHub &lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sample-applications/Meetup_Event&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This example is created in TIBCO Flogo® Enterprise 2.8.0 studio.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Neo4j</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-neo4j/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-neo4j/</guid>
      <description>
        
        
        &lt;p&gt;Implementation Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/neo4j/connector/neo4j/&#34;&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/neo4j/activity/neo4jupsert/&#34;&gt;Neo4jUpsert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Gremlin</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-gremlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-gremlin/</guid>
      <description>
        
        
        &lt;p&gt;Implementation Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/gremlin/connector/gremlin/&#34;&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/gremlin/activity/janusgraphupsert/&#34;&gt;JanusgraphUpsert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: RESTful Service</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/restful-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/sample-applications/restful-service/</guid>
      <description>
        
        
        &lt;h2 id=&#34;create-tgdb-connection&#34;&gt;Create TGDB Connection&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;create_connection.jpg&#34; alt=&#34;create_connection&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-application&#34;&gt;Create Application&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;create_application.jpg&#34; alt=&#34;create_application&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-flow-for-querying-metadata&#34;&gt;Create Flow for querying Metadata&lt;/h3&gt;
&lt;h4 id=&#34;configure-flow-inputs-and-outputs&#34;&gt;Configure flow inputs and outputs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;input sample&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;queryType&amp;quot; : &amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;output sample&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;queryResult&amp;quot;: {
        &amp;quot;content&amp;quot;: {},
        &amp;quot;success&amp;quot;: true,
        &amp;quot;error&amp;quot;: {
            &amp;quot;code&amp;quot;: 101,
            &amp;quot;message&amp;quot;: &amp;quot;Not found&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;add-activities&#34;&gt;Add activities&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Activity 1 :&lt;/strong&gt;
GraphBuilder_TGDB -&amp;gt; TGDBQuery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Activity 2 :&lt;/strong&gt;
Default -&amp;gt; Return&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add-a-trigger-receive-http-message&#34;&gt;Add a trigger (Receive HTTP Message)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$trigger.pathParams.queryType&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reply&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$flow.queryResult&lt;/p&gt;
&lt;p&gt;sample :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;queryResult&amp;quot;: {
        &amp;quot;content&amp;quot;: {},
        &amp;quot;success&amp;quot;: true,
        &amp;quot;error&amp;quot;: {
            &amp;quot;code&amp;quot;: 101,
            &amp;quot;message&amp;quot;: &amp;quot;Not found&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-flow-for-querying-data&#34;&gt;Create Flow for Querying Data&lt;/h3&gt;
&lt;h4 id=&#34;configure-flow-inputs-and-outputs-1&#34;&gt;Configure flow inputs and outputs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;input sample&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;queryType&amp;quot; : &amp;quot;&amp;quot;,
    &amp;quot;language&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;queryString&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;traversalCondition&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;endCondition&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;traversalDepth&amp;quot;: 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;output sample&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;queryResult&amp;quot;: {
        &amp;quot;content&amp;quot;: {},
        &amp;quot;success&amp;quot;: true,
        &amp;quot;error&amp;quot;: {
            &amp;quot;code&amp;quot;: 101,
            &amp;quot;message&amp;quot;: &amp;quot;Not found&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;add-activities-1&#34;&gt;Add activities&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Activity 1 :&lt;/strong&gt;
GraphBuilder_TGDB -&amp;gt; TGDBQuery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Activity 2 :&lt;/strong&gt;
Default -&amp;gt; Return&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add-a-trigger-receive-http-message-1&#34;&gt;Add a trigger (Receive HTTP Message)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$trigger.pathParams.queryType
and 
$trigger.body&lt;/p&gt;
&lt;p&gt;sample :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;query&amp;quot;: {
  	&amp;quot;language&amp;quot; : &amp;quot;tgql&amp;quot;,
    &amp;quot;queryString&amp;quot; : &amp;quot;@nodetype = &#39;houseMemberType&#39; and memberName = &#39;Napoleon Bonaparte&#39;;&amp;quot;,
    &amp;quot;traversalCondition&amp;quot; : &amp;quot;@edgetype = &#39;relation&#39; and relation = &#39;spouse&#39; and @isfromedge = 1 and @degree = 1;&amp;quot;,
    &amp;quot;endCondition&amp;quot; : &amp;quot;&amp;quot;,
	&amp;quot;traversalDepth&amp;quot; : 1
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reply&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$flow.queryResult&lt;/p&gt;
&lt;p&gt;sample :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;queryResult&amp;quot;: {
        &amp;quot;content&amp;quot;: {},
        &amp;quot;success&amp;quot;: true,
        &amp;quot;error&amp;quot;: {
            &amp;quot;code&amp;quot;: 101,
            &amp;quot;message&amp;quot;: &amp;quot;Not found&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;implementation-source&#34;&gt;Implementation Source&lt;/h4&gt;
&lt;p&gt;stored on GitHub &lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sample-applications/TGDB_RESTful_Service&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This example is created in TIBCO Flogo® Enterprise 2.8.0 studio.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SSE</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-sse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-sse/</guid>
      <description>
        
        
        &lt;p&gt;Implementation Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sse/connector/sse/&#34;&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sse/activity/sseendpoint/&#34;&gt;SSEEndpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sse/trigger/sseserver/&#34;&gt;SSEServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/tree/master/sse/trigger/ssesub/&#34;&gt;SSESubscriber&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Tools</title>
      <link>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tibcosoftware.github.io/labs-graphbuilder-contrib/docs/components/graphbuilder-tools/</guid>
      <description>
        
        
        &lt;p&gt;Implementation Sources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/connector/simpletable/&#34;&gt;Connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/trigger/filereader/&#34;&gt;FileReader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/accumulator/&#34;&gt;Accumulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/csvfilewriter/&#34;&gt;CSVFileWriter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/csvparser/&#34;&gt;CSVParser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/jsondatadecoupler/&#34;&gt;JsonDataDecoupler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/jsondeserializer/&#34;&gt;JsonDeserializer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/jsonparser/&#34;&gt;JsonParser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/csvparser/&#34;&gt;CSVParser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/jsondatadecoupler/&#34;&gt;JsonDataDecoupler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/jsondeserializer/&#34;&gt;JsonDeserializer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/tablequery/&#34;&gt;TableQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TIBCOSoftware/labs-graphbuilder-contrib/blob/master/tools/activity/tableupsert/&#34;&gt;TableUpsert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
